     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 制作目标文件的模式
     5 00000000                                 [INSTRSET "i486p"]				; 这个程序是给486用的
     6 00000000                                 [BITS 32]						; 制作32位模式用的机器语言
     7 00000000                                 [FILE "naskfunc.nas"]			; 源文件名信息
     8 00000000                                 
     9 00000000                                 		; 程序中包含的函数名
    10 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    11 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    12 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    13 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    14 00000000                                 		GLOBAL	_load_gdtr, _load_idtr
    15 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c
    16 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c
    17 00000000                                 
    18                                          [SECTION .text]	; 目标文件中写了这些之后再写程序
    19 00000000                                 
    20 00000000                                 
    21 00000000                                 
    22 00000000                                 _io_hlt:	; void io_hlt(void);
    23 00000000 F4                              		HLT
    24 00000001 C3                              		RET
    25 00000002                                 
    26 00000002                                 ; 将中断许可标志置为0，禁止中断
    27 00000002                                 _io_cli:	; void io_cli(void);
    28 00000002 FA                              		CLI
    29 00000003 C3                              		RET
    30 00000004                                 
    31 00000004                                 _io_sti:	; void io_sti(void);
    32 00000004 FB                              		STI
    33 00000005 C3                              		RET
    34 00000006                                 
    35 00000006                                 _io_stihlt:	; void io_stihlt(void);
    36 00000006 FB                              		STI
    37 00000007 F4                              		HLT
    38 00000008 C3                              		RET
    39 00000009                                 
    40 00000009                                 ;; 从指定装置读取数据的函数
    41 00000009                                 
    42 00000009                                 _io_in8:	; int io_in8(int port);
    43 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    44 0000000D B8 00000000                     		MOV		EAX,0
    45 00000012 EC                              		IN		AL,DX			; 返回值默认都在AX中
    46 00000013 C3                              		RET
    47 00000014                                 
    48 00000014                                 _io_in16:	; int io_in16(int port);
    49 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    50 00000018 B8 00000000                     		MOV		EAX,0
    51 0000001D 66 ED                           		IN		AX,DX
    52 0000001F C3                              		RET
    53 00000020                                 
    54 00000020                                 _io_in32:	; int io_in32(int port);
    55 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    56 00000024 ED                              		IN		EAX,DX
    57 00000025 C3                              		RET
    58 00000026                                 
    59 00000026                                 ;; 往指定装置里传送数据的函数
    60 00000026                                 
    61 00000026                                 _io_out8:	; void io_out8(int port, int data);
    62 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    63 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    64 0000002E EE                              		OUT		DX,AL
    65 0000002F C3                              		RET
    66 00000030                                 
    67 00000030                                 _io_out16:	; void io_out16(int port, int data);
    68 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    69 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    70 00000038 66 EF                           		OUT		DX,AX
    71 0000003A C3                              		RET
    72 0000003B                                 
    73 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    74 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    75 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    76 00000043 EF                              		OUT		DX,EAX
    77 00000044 C3                              		RET
    78 00000045                                 
    79 00000045                                 
    80 00000045                                 
    81 00000045                                 ; 记录中断许可标志的值
    82 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    83 00000045 9C                              		PUSHFD		; 指PUSH EFLAGS，将标志位的值按双字长压入栈
    84 00000046 58                              		POP		EAX
    85 00000047 C3                              		RET			; 返回EAX中的值
    86 00000048                                 
    87 00000048                                 ; 复原中断许可标志
    88 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    89 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    90 0000004C 50                              		PUSH	EAX
    91 0000004D 9D                              		POPFD		; 指POP EFLAGS，按双字长将标志位从栈弹出到标志寄存器
    92 0000004E C3                              		RET			; 返回EAX中的值
    93 0000004F                                 
    94 0000004F                                 
    95 0000004F                                 
    96 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    97 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    98 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX		; 小端字节序
    99 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]			; 将16位限制（6 字节数据操作数的2个低位字节）与32位基址（数据操作数的4个高位字节）加载到寄存器
   100 0000005E C3                              		RET
   101 0000005F                                 
   102 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
   103 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
   104 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
   105 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
   106 0000006E C3                              		RET
   107 0000006F                                 
   108 0000006F                                 _asm_inthandler21:
   109 0000006F 06                              		PUSH	ES
   110 00000070 1E                              		PUSH	DS
   111 00000071 60                              		PUSHAD
   112 00000072 89 E0                           		MOV		EAX,ESP
   113 00000074 50                              		PUSH	EAX
   114 00000075 66 8C D0                        		MOV		AX,SS
   115 00000078 8E D8                           		MOV		DS,AX
   116 0000007A 8E C0                           		MOV		ES,AX
   117 0000007C E8 [00000000]                   		CALL	_inthandler21
   118 00000081 58                              		POP		EAX
   119 00000082 61                              		POPAD
   120 00000083 1F                              		POP		DS
   121 00000084 07                              		POP		ES
   122 00000085 CF                              		IRETD
   123 00000086                                 
   124 00000086                                 _asm_inthandler27:
   125 00000086 06                              		PUSH	ES
   126 00000087 1E                              		PUSH	DS
   127 00000088 60                              		PUSHAD
   128 00000089 89 E0                           		MOV		EAX,ESP
   129 0000008B 50                              		PUSH	EAX
   130 0000008C 66 8C D0                        		MOV		AX,SS
   131 0000008F 8E D8                           		MOV		DS,AX
   132 00000091 8E C0                           		MOV		ES,AX
   133 00000093 E8 [00000000]                   		CALL	_inthandler27
   134 00000098 58                              		POP		EAX
   135 00000099 61                              		POPAD
   136 0000009A 1F                              		POP		DS
   137 0000009B 07                              		POP		ES
   138 0000009C CF                              		IRETD
   139 0000009D                                 
   140 0000009D                                 _asm_inthandler2c:
   141 0000009D 06                              		PUSH	ES
   142 0000009E 1E                              		PUSH	DS
   143 0000009F 60                              		PUSHAD
   144 000000A0 89 E0                           		MOV		EAX,ESP
   145 000000A2 50                              		PUSH	EAX
   146 000000A3 66 8C D0                        		MOV		AX,SS
   147 000000A6 8E D8                           		MOV		DS,AX
   148 000000A8 8E C0                           		MOV		ES,AX
   149 000000AA E8 [00000000]                   		CALL	_inthandler2c
   150 000000AF 58                              		POP		EAX
   151 000000B0 61                              		POPAD
   152 000000B1 1F                              		POP		DS
   153 000000B2 07                              		POP		ES
   154 000000B3 CF                              		IRETD
